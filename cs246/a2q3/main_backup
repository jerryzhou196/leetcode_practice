
int main(int argc, char *argv[]) {
	char board[3][3];
	int  unique = 0;

	for (int x = 0; x < 3; x++) {
		for (int y = 0; y < 3; y++) {
			board[x][y] = unique;
			++unique;
		}
	}
	int error_occurred = 0;

	// x is row, y is column
	int  x      = -1;   // invalid default values
	int  y      = -1;   // invalid default values
	char player = '_';  // invalid default values
	char victory;

	int ties   = 0;
	int x_wins = 0;
	int o_wins = 0;
	int aborts = 0;

	if (argc == 1) {
		string raw_input;

		processInput(cin, board);
		while (getline(cin, raw_input)) {  // get our input and check if it's invalid
			                               // (contains only EOF for instance)

			// NOTE: see documentation:
			// https://cplusplus.com/reference/string/string/getline/ getline will
			// stop at either '\n' or EOF

			istringstream input(raw_input);

			input >> player >> x >> y;

			int fail = input.fail();

			while (input.peek() == ' ') input.get();

			if (validInput(player, x, y, board, input.peek(), fail)) {
				// check for range error and that the space is valid
				board[x][y] = player;
				printBoard(board);
			} else {
				error_occurred = true;
				break;
			}

			victory = hasVictory(board);

			if (victory != '_') {
				if (victory == 'x') ++x_wins;
				if (victory == 'o') ++o_wins;
				break;
			}
		}

		// we get to here either because :
		// we finished all valid inputs and it's a TIE,
		// a VICTORY has happenedU
		// we ended prematurely because of invalid input (print Invalid Move)
		// we ended prematurely because of EOF (print Unfinished Game)

		if (victory == '_' && !error_occurred && !isBoardFull(board)) {
			cerr << "Unfinished Game" << endl;
			++aborts;
			error_occurred = true;
		}

		if (victory == '_' && !error_occurred && isBoardFull(board)) ++ties;

	} else {
		for (int args = 1; args < argc; args++) {
			ifstream game(argv[args]);

			if (game.fail()) {
				cerr << "Bad file" << endl;
				++aborts;
				error_occurred = true;
				continue;
			}

			string raw_input;
			while (getline(game, raw_input)) {
				istringstream input(raw_input);

				input >> player >> x >> y;

				int fail = input.fail();

				while (input.peek() == ' ') input.get();  // move char until non-empty space char

				if (validInput(player, x, y, board, input.peek(), fail)) {
					// check for range error and that the space is valid
					board[x][y] = player;
					printBoard(board);
				} else {
					error_occurred = true;
					break;
				}

				victory = hasVictory(board);

				if (victory != '_') {
					if (victory == 'x') ++x_wins;
					if (victory == 'o') ++o_wins;
					break;
				}
			}

			if (victory == '_' && !error_occurred && !isBoardFull(board)) {
				cerr << "Unfinished Game" << endl;
				++aborts;
				error_occurred = true;
			}

			if (victory == '_' && !error_occurred && isBoardFull(board)) ++ties;

			unique = 0;
			for (int x = 0; x < 3; x++) {
				for (int y = 0; y < 3; y++) {
					board[x][y] = unique;
					++unique;
				}
			}
		}
	}
	printSummary(o_wins, x_wins, ties, aborts);
	return (error_occurred) ? 1 : 0;
}
