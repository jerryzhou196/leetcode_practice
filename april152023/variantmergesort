Give the variant of MergeSort that subdivides the input array into k subarrays, and give an exact (but simple) upper bound on the number of element comparisons it does (for k = 2, you should obtain n log2(n)). You can assume that n is a power of k. You can also assume that k is a power of 2. 

Edit the following pseduo-code to incorproate these changes:

variant-merge-sort(A, k):
    Input: Array A of size at least n,(possibly uninitialized) array S of size n
    if (A.length <= 1):
        return A
        
    // We are guranteed size is a natural number
    size = n / k 
    subarrays = []
    
    for (i←0;i < k; i++):
        subarrays[i] = A[i * size:(i + 1) * size] 
        subarrays[i] = variant-merge-sort(subarrays[i], k)
        
    return variant-merge(subarrays, k)

variant-merge(subarrays, k):
    if subarrays.length <= 1: return subarrays[0]

    result = an empty array


    for (y←0;y < k - 1; y+= 2)
        result.append(merge(subarrays[y], subarrays[y]))

    return variant-merge(result)

    
    do: 
        min_index ← -1
        min ← infinty 

        for (i←0;i < k; i++):
            if first(subarrays[i]) < min:
                min_index = i
                min = first(subarrays[i])

        if min_index >= 0 
            array.append(min)
            remove first element from subarrays[min_index]

    while (min_index != 0)


            
    
        


    


    


merge(A, l, m, r, S)
    Input : A[0..n − 1] is an array, A[l..m] is sorted, A[m + 1..r] is sorted. S[0..n − 1] is an array
copy A[l..r] into S[l..r] 
int iL ← l
int iR←m+1 for(k←l;k≤r;k++)do
    if iL > m then A[k] ← S[iR++]
    else if iR > r then A[k] ← S[iL++]
    else if S[iL] ≤ S[iR] then A[k] ← S[iL++] 
    else A[k] ← S[iR++]
